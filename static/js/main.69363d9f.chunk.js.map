{"version":3,"sources":["logo.svg","components/Card/index.js","components/Nav/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","props","react_default","a","createElement","className","onClick","checkAndShuffle","id","alt","name","src","image","Nav","class","score","App","state","cards","chosen","_this","includes","alert","console","log","Object","toConsumableArray","push","setState","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","_this2","this","components_Nav","map","card","components_Card","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"s1CAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oOCazBC,MAVf,SAAcC,GACV,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBAAyBC,QAAS,kBAAML,EAAMM,gBAAgBN,EAAMO,MAC/EN,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,wBCQlCC,MAZf,SAAaZ,GACT,OAEIC,EAAAC,EAAAC,cAAA,OAAKU,MAAM,wCACPZ,EAAAC,EAAAC,cAAA,OAAKU,MAAM,aACPZ,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,oBAAYH,EAAMc,UCmEnBC,6MApEbC,MAAQ,CACNC,MAAOA,EACPC,OAAQ,GACRJ,MAAO,KAGTR,gBAAkB,SAACC,GACjB,GAAKY,EAAKH,MAAME,OAAOE,SAASb,GAc9Bc,MAAM,8BAd6B,CACnCC,QAAQC,IAAI,gBACZD,QAAQC,IAAIJ,EAAKH,MAAME,QAEvB,IAAIA,EAAMM,OAAAC,EAAA,EAAAD,CAAOL,EAAKH,MAAME,QAE5BA,EAAOQ,KAAKnB,GAEZY,EAAKQ,SAAS,CAAET,WAChB,IAAMJ,EAAQK,EAAKH,MAAMF,MAAQ,EACjCK,EAAKQ,SAAS,CAAEb,UAChB,IAAMG,EAAQE,EAAKS,QAAQT,EAAKH,MAAMC,OACtCE,EAAKQ,SAAS,CAAEV,cAMpBW,QAAU,SAAUC,GAMlB,IAJA,IACIC,EAAgBC,EADhBC,EAAeH,EAAMI,OAIlB,IAAMD,GAEXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,2EAKA,IAAAQ,EAAAC,KACP,OACErC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACoC,EAAD,CACEzB,MAAOwB,KAAKtB,MAAMF,QAEpBb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACZkC,KAAKtB,MAAMC,MAAMuB,IAAI,SAAAC,GAAI,OACxBxC,EAAAC,EAAAC,cAACuC,EAAD,CACEnC,GAAIkC,EAAKlC,GACTD,gBAAiB+B,EAAK/B,gBACtBG,KAAMgC,EAAKhC,KACXE,MAAO8B,EAAK9B,mBA5DRgC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.69363d9f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Card(props) {\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"img-container col-md-4\" onClick={() => props.checkAndShuffle(props.id)}>\r\n                <img alt={props.name} src={props.image}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Nav(props) {\r\n    return (\r\n\r\n        <nav class=\"navbar navbar-dark fixed-top bg-dark\">\r\n            <div class=\"container\">\r\n                <h2>Click Game</h2>\r\n                <h3>score: {props.score}</h3>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Nav;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Card from \"./components/Card\";\nimport cards from \"./cards.json\";\nimport Nav from \"./components/Nav\";\n\nclass App extends Component {\n  state = {\n    cards: cards,\n    chosen: [],\n    score: 0\n  }\n\n  checkAndShuffle = (id) => {\n    if (!this.state.chosen.includes(id)) {\n      console.log(\"right choice\");\n      console.log(this.state.chosen);\n      // create new chosen array based on current state\n      let chosen = [...this.state.chosen];\n      // add item to it\n      chosen.push(id);\n      // set state\n      this.setState({ chosen });\n      const score = this.state.score + 1;\n      this.setState({ score });\n      const cards = this.shuffle(this.state.cards);\n      this.setState({ cards });\n    } else {\n      alert(\"You already chose that\");\n    }\n  }\n\n  shuffle = function (array) {\n\n    var currentIndex = array.length;\n    var temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n\n  };\n\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Nav \n          score={this.state.score}\n        />\n        <div className=\"row content\">\n          {this.state.cards.map(card => (\n            <Card\n              id={card.id}\n              checkAndShuffle={this.checkAndShuffle}\n              name={card.name}\n              image={card.image}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}